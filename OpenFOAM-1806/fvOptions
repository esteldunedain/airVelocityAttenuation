FoamFile
{
    version 2.0;
    format ascii;
    class dictionary;
    location "system";
    object fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

airVelocityAttenuation
{
    type vectorCodedSource;
    active true;
    selectionMode all;
    fields(U);
    name codedSource;

    codeInclude
    #{
        #include "fvmSup.H"
    #};

    codeSetValue
    #{
    #};

    codeCorrect
    #{
    #};

    codeAddSup
    #{  
        dimensionedScalar attenuationRate = dimensionedScalar("rate", dimensionSet(0, 0, -1, 0, 0), 10.0);
        scalar alphaThreshold = 0.01;

        const GeometricField<vector, fvPatchField, volMesh> &psi = eqn.psi();

        volScalarField &rho2 = const_cast<volScalarField &>(mesh_.lookupObject<volScalarField>("rho"));
        volScalarField &alpha1 = const_cast<volScalarField &>(mesh_.lookupObject<volScalarField>("alpha.water"));

        volScalarField::Internal Sp(
            IOobject(
                "USp",
                mesh_.time().timeName(),
                mesh_,
                IOobject::NO_READ,
                IOobject::NO_WRITE),
            mesh_,
            dimensioned<scalar>(eqn.dimensions() / dimVolume / psi.dimensions(), Zero),
            false);
        Sp = -attenuationRate * rho2 * max(min((alphaThreshold - alpha1) / alphaThreshold, 1.0), 0.0);

        eqn += fvm::SuSp(Sp, psi);
        Info << "airVelocityAttenuation: "
            << "Sp max/min: " << max(Sp) << " / " << min(Sp) << endl;
    #};

    codeConstrain
    #{
    #};
}
